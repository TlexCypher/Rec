openapi: "3.0.3"
info:
  title: Vox api
  version: "1.0"
servers:
  - url: http://localhost:{port}
    description: localhost api, not production
    variables:
      port:
        default: "8000"
        description: "The port number of go-app."
paths:
  /healthcheck:
    get:
      summary: Health check
      operationId: health-check
      responses:
        "200":
          description: health check
          content:
            application/json:
              schema:
                $ref: "./responses.yaml#/components/schemas/HealthCheckResponse"
  /users:
    get:
      summary: Get all users
      operationId: get-all-users
      responses:
        "200":
          description: Get list of all registered users.
          content:
            application/json:
              schema:
                $ref: "./responses.yaml#/components/schemas/GetAllUsersResponse"
        "500":
          description: Failed to fetch users.
          content:
            application/json:
              schema:
                $ref: "./responses.yaml#/components/schemas/Error"
    post:
      summary: Create a new user
      operationId: create-new-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './requests.yaml#/components/schemas/CreateUserRequest'
      responses:
        "201":
          description: Create new user.
          content:
            application/json:
              schema:
                $ref: "./responses.yaml#/components/schemas/CreateUserResponse"
        "400":
          description: Invalid request content.
          content:
            application/json:
              schema:
                $ref: "./responses.yaml#/components/schemas/Error"
        "500":
          description: Failed to create new user.
          content:
            application/json:
              schema:
                $ref: "./responses.yaml#/components/schemas/Error"
  /category:
    get:
      summary: Get all categories.
      responses:
        '200':
          description: Success to get all categories.
          content:
            application/json:
              schema:
                $ref: './responses.yaml#/components/schemas/GetCategoriesResponse'
        '500':
          description: Failed to get all categories
          content:
            application/json:
              schema:
                $ref: './responses.yaml#/components/schemas/Error'
    post:
      summary: Create a new category.
      operationId: create-new-category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './requests.yaml#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Success to create a new category.
          content:
            application/json:
              schema: 
                $ref: './responses.yaml#/components/schemas/CreateCategoryResponse'
        '500':
          description: Failed to create a new category.
          content:
            application/json:
              schema: 
                $ref: './responses.yaml#/components/schemas/Error'

  /inventory:
    post:
      summary: Create a new inventory.
      operationId: create-new-inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './requests.yaml#/components/schemas/CreateInventoryRequest'
      responses:
        '201':
          description: Success to create a new inventory.
          content:
            application/json:
              schema: 
                $ref: './responses.yaml#/components/schemas/CreateInventoryResponse'
        '500':
          description: Failed to create a new inventory.
          content:
            application/json:
              schema: 
                $ref: './responses.yaml#/components/schemas/Error'

  /inventory/{userId}:  
    get:
      summary: Get inventory information for a specific user. 
      parameters:
        - name: userId
          in: path
          schema: 
            type: string
          required: true
      responses:
        '200':
          description: Success to get inventory information for a specific user.
          content:
            application/json:
              schema:
                $ref: './responses.yaml#/components/schemas/GetInventoriesResponse'
        '500':
          description: Failed to get inventories.
          content:
            application/json:
              schema:
                $ref: './responses.yaml#/components/schemas/Error'
