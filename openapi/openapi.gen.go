// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"Vox/internal/domain/valueobject"
	"Vox/internal/presentation/dto"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Category defines model for Category.
type Category = dto.Category

// CreateCategoryRequest defines model for CreateCategoryRequest.
type CreateCategoryRequest struct {
	// Name Category name
	Name string `json:"name"`
}

// CreateCategoryResponse defines model for CreateCategoryResponse.
type CreateCategoryResponse struct {
	CategoryId *valueobject.CategoryId `json:"categoryId,omitempty"`
}

// CreateInventoryRequest defines model for CreateInventoryRequest.
type CreateInventoryRequest struct {
	Categories        []string  `json:"categories"`
	ProductCode       string    `json:"productCode"`
	ProductName       string    `json:"productName"`
	RemainingQuantity int       `json:"remainingQuantity"`
	Remarks           *[]string `json:"remarks,omitempty"`
}

// CreateInventoryResponse defines model for CreateInventoryResponse.
type CreateInventoryResponse struct {
	Inventory *valueobject.InventoryId `json:"inventory,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Role role for created user.
	Role *string `json:"role,omitempty"`

	// Username name for created user.
	Username *string `json:"username,omitempty"`
}

// CreateUserResponse defines model for CreateUserResponse.
type CreateUserResponse struct {
	UserId *valueobject.UserId `json:"userId,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Message error message.
	Message *string `json:"message,omitempty"`
}

// GetAllUsersResponse defines model for GetAllUsersResponse.
type GetAllUsersResponse struct {
	// Users list of all users.
	Users *[]User `json:"users,omitempty"`
}

// GetCategoriesResponse defines model for GetCategoriesResponse.
type GetCategoriesResponse struct {
	Categories *[]Category `json:"categories,omitempty"`
}

// GetInventoriesResponse defines model for GetInventoriesResponse.
type GetInventoriesResponse struct {
	// Inventories list of all inventories.
	Inventories *[]Inventory `json:"inventories,omitempty"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Message *string `json:"message,omitempty"`
}

// Inventory defines model for Inventory.
type Inventory = dto.Inventory

// User defines model for User.
type User = dto.User

// CreateNewCategoryJSONRequestBody defines body for CreateNewCategory for application/json ContentType.
type CreateNewCategoryJSONRequestBody = CreateCategoryRequest

// CreateNewInventoryJSONRequestBody defines body for CreateNewInventory for application/json ContentType.
type CreateNewInventoryJSONRequestBody = CreateInventoryRequest

// CreateNewUserJSONRequestBody defines body for CreateNewUser for application/json ContentType.
type CreateNewUserJSONRequestBody = CreateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all categories.
	// (GET /category)
	GetCategory(ctx echo.Context) error
	// Create a new category.
	// (POST /category)
	CreateNewCategory(ctx echo.Context) error
	// Health check
	// (GET /healthcheck)
	HealthCheck(ctx echo.Context) error
	// Create a new inventory.
	// (POST /inventory)
	CreateNewInventory(ctx echo.Context) error
	// Get inventory information for a specific user.
	// (GET /inventory/{userId})
	GetInventoryUserId(ctx echo.Context, userId string) error
	// Get all users
	// (GET /users)
	GetAllUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	CreateNewUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategory(ctx)
	return err
}

// CreateNewCategory converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewCategory(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// CreateNewInventory converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewInventory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewInventory(ctx)
	return err
}

// GetInventoryUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetInventoryUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInventoryUserId(ctx, userId)
	return err
}

// GetAllUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllUsers(ctx)
	return err
}

// CreateNewUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/category", wrapper.GetCategory)
	router.POST(baseURL+"/category", wrapper.CreateNewCategory)
	router.GET(baseURL+"/healthcheck", wrapper.HealthCheck)
	router.POST(baseURL+"/inventory", wrapper.CreateNewInventory)
	router.GET(baseURL+"/inventory/:userId", wrapper.GetInventoryUserId)
	router.GET(baseURL+"/users", wrapper.GetAllUsers)
	router.POST(baseURL+"/users", wrapper.CreateNewUser)

}
