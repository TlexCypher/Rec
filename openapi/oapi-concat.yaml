openapi: 3.0.3
info:
  title: Vox api
  version: '1.0'
servers:
  - url: http://localhost:{port}
    description: localhost api, not production
    variables:
      port:
        default: '8000'
        description: The port number of go-app.
paths:
  /healthcheck:
    get:
      summary: Health check
      operationId: health-check
      responses:
        '200':
          description: health check
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /users:
    get:
      summary: Get all users
      operationId: get-all-users
      responses:
        '200':
          description: Get list of all registered users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUsersResponse'
        '500':
          description: Failed to fetch users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      operationId: create-new-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Create new user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Invalid request content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create new user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /category:
    get:
      summary: Get all categories.
      responses:
        '200':
          description: Success to get all categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoriesResponse'
        '500':
          description: Failed to get all categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new category.
      operationId: create-new-category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Success to create a new category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCategoryResponse'
        '500':
          description: Failed to create a new category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /inventory:
    post:
      summary: Create a new inventory.
      operationId: create-new-inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInventoryRequest'
      responses:
        '201':
          description: Success to create a new inventory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInventoryResponse'
        '500':
          description: Failed to create a new inventory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /inventory/{userId}:
    get:
      summary: Get inventory information for a specific user.
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success to get inventory information for a specific user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInventoriesResponse'
        '500':
          description: Failed to get inventories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    HealthCheckResponse:
      type: object
      properties:
        message:
          type: string
    User:
      type: object
      x-go-type: dto.User
      properties:
        id:
          type: string
        username:
          type: string
        role:
          type: string
          enum:
            - admin
            - operator
          description: User's role
      required:
        - id
        - username
        - role
    GetAllUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/User'
          description: list of all users.
    Error:
      type: object
      properties:
        message:
          type: string
          description: error message.
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: name for created user.
        role:
          type: string
          description: role for created user.
    CreateUserResponse:
      type: object
      properties:
        userId:
          type: string
          x-go-type: valueobject.UserId
    Category:
      type: object
      x-go-type: dto.Category
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    GetCategoriesResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Category'
    CreateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          description: Category name
      required:
        - name
    CreateCategoryResponse:
      type: object
      properties:
        categoryId:
          type: string
          x-go-type: valueobject.CategoryId
    CreateInventoryRequest:
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
        productCode:
          type: string
        productName:
          type: string
        remainingQuantity:
          type: integer
        remarks:
          type: array
          items:
            type: string
      required:
        - categories
        - productCode
        - productName
        - remainingQuantity
    CreateInventoryResponse:
      type: object
      properties:
        inventory:
          type: string
          x-go-type: valueobject.InventoryId
    Inventory:
      type: object
      x-go-type: dto.Inventory
      properties:
        id:
          type: string
          description: inventory local id
        inventoryId:
          type: string
          description: inventory global id
        categories:
          type: array
          items:
            type: string
        productCode:
          type: string
        productName:
          type: string
        remarks:
          type: array
          items:
            type: string
        remainingQuantity:
          type: integer
        representProductName:
          type: string
        representProductCode:
          type: string
      required:
        - id
        - inventoryId
        - categories
        - productCode
        - productName
        - remarks
        - remainingQuantity
        - representProductName
        - representProductCode
    GetInventoriesResponse:
      type: object
      properties:
        inventories:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Inventory'
          description: list of all inventories.
